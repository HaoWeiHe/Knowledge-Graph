# -*- coding: utf-8 -*-
"""KG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xv2dVOVw8kFXZa1wg6I7mGen3DCjIz43
"""

!pip install spacy==2.0.16

# !pip install Spacy==2.0.11

!python -m spacy download en_core_web_sm

import spacy
import en_core_web_sm
spacy.load('en_core_web_sm')

nlp = en_core_web_sm.load()
example = nlp('The US economy lost 140,000 jobs in December.')
for e in example:
	print("{}\t{}\t{})".format(e, e.ent_iob_,e.ent_type_ ))

from bs4 import BeautifulSoup
import requests
import re
import random
def text_from_web(url):
    res = requests.get(url)
    html = res.text
    soup = BeautifulSoup(html, 'lxml')
    for script in soup(["script", "style", 'aside']):
        script.extract()
    return " ".join(re.split(r'[\n\t]+', soup.get_text()))


# news_text = 'The US economy lost 140,000 jobs in December.'
news_text = text_from_web('https://en.wikipedia.org/wiki/Milky_Way')#'https://www.nytimes.com/2021/01/09/us/politics/capitol-riot-charges.html?action=click&module=Spotlight&pgtype=Homepage')
doc = nlp(news_text)
stns = [ x for x in doc.sents]

stn_num_rand = random.randint(0,len(stns))
from spacy import displacy
displacy.render(nlp(news_text), jupyter=True, style='ent')

displacy.render(nlp(stns[0].text), jupyter=True, style='dep')

a = "piral arms typically contain a higher density of interstellar gas and dust than the Galactic average as well as a greater concentration of star formation"
displacy.render(nlp(a), jupyter=True, style='dep')

def extract_entities(sent):
  ent1, ent2 = "",""
  prefix =[]
  doc = nlp(sent)
  for tok in doc:
    
    if tok.dep_ == "compound" :
      prefix.append(tok.text)
    if tok.dep_.endswith("mod") == True:
      prefix = [tok.text]

    if tok.dep_.find("subj") == True:
      prefix.append(tok.text)
      ent1 = " ".join(prefix)
      prefix = []
    if tok.dep_.find("obj") == True:
      prefix.append(tok.text)
      ent2 = " ".join(prefix)
  return [ent1.strip(), ent2.strip()] if ent1 and ent2 else None

import spacy
from spacy.matcher import Matcher

def extrac_relation(sent):
  res = []
  nlp = spacy.load("en_core_web_sm")
  matcher = Matcher(nlp.vocab)
  pattern = [{'DEP':'ROOT'}]
          
  matcher.add("Gramma_1", None, pattern) 
  doc = nlp(sent)
  matches = matcher(doc)
  for match_id, start, end in matches:
    string_id = nlp.vocab.strings[match_id]  
    for idx in range(start, end):
      res.append(doc[idx].lemma_)# = doc[start:end]
  
  return res[0]

from tqdm import tqdm
subs, objs = [], []
relations = []
for stn in tqdm(stns):
  chunk_pair = extract_entities(stn.text)
  relation = extrac_relation(stn.text)
  if chunk_pair and relation:
    subs.append(chunk_pair[0].strip())
    objs.append(chunk_pair[1].strip())
    relations.append(relation)

import pandas as pd
df = pd.DataFrame({'subj':subs , "obj":objs, "rel": relations})
#create directed graph from df
import networkx as nx
G = nx.from_pandas_edgelist(df, "subj", "obj", edge_attr=True, create_using=nx.MultiDiGraph())

import matplotlib.pyplot as plt
plt.figure(figsize=(12,12))

pos = nx.spring_layout(G)
nx.draw(G, with_labels=True, node_color='skyblue', edge_cmap =plt.cm.Blues, pos = pos)
plt.show()

G= nx.from_pandas_edgelist(df[df['rel']=="appear"], "subj", "obj",
                          edge_attr=True, create_using=nx.MultiDiGraph())

plt.figure(figsize=(12,12))
pos = nx.spring_layout(G, k = 0.8) # k regulates the distance between nodes
nx.draw(G, with_labels=True, node_color='skyblue', node_size=1500, edge_cmap=plt.cm.Blues, pos = pos)
plt.show()

from collections import Counter
Counter(df.rel).most_common(10)

relations

